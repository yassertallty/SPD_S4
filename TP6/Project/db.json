{
  "posts": [
    {
      "id": "1",
      "title": "Getting Started with Vue 3 Composition API",
      "body": "The Composition API is a set of APIs that allows you to write Vue components using imported functions instead of declaring options. It was introduced in Vue 3 and offers better TypeScript support, code organization, and reusability.\n\nOne of the main advantages of the Composition API is the ability to organize code by logical concerns rather than option types. This means you can group related code together, making it easier to understand and maintain components as they grow in complexity.\n\nHere's a simple example of a counter component using the Composition API:\n\n```js\nimport { ref } from 'vue'\n\nexport default {\n  setup() {\n    const count = ref(0)\n    \n    function increment() {\n      count.value++\n    }\n    \n    return {\n      count,\n      increment\n    }\n  }\n}\n```\n\nWith the <script setup> syntax, this becomes even more concise:\n\n```js\n<script setup>\nimport { ref } from 'vue'\n\nconst count = ref(0)\n\nfunction increment() {\n  count.value++\n}\n</script>\n```",
      "tags": "vue, composition-api, javascript"
    },
    {
      "id": "3",
      "title": "Managing State with Pinia in Vue 3",
      "body": "Pinia is the official state management library for Vue, providing a simpler and more intuitive alternative to Vuex. It was designed with the Composition API in mind and offers excellent TypeScript support out of the box.\n\nPinia's core features include:\n\n1. **Intuitive API**: No more mutations, just actions and state\n2. **Devtools support**: Time travel debugging, state inspection\n3. **Hot module replacement**: Modify your stores without reloading\n4. **Plugin system**: Extend Pinia with plugins\n5. **Type support**: Automatic type inference with TypeScript\n\nHere's how to define a basic store with Pinia:\n\n```js\n// stores/counter.js\nimport { defineStore } from 'pinia'\n\nexport const useCounterStore = defineStore('counter', {\n  state: () => ({\n    count: 0,\n    name: 'Counter'\n  }),\n  getters: {\n    doubleCount: (state) => state.count * 2\n  },\n  actions: {\n    increment() {\n      this.count++\n    },\n    async fetchFromAPI() {\n      // You can do async operations here\n      const result = await fetch('/api/counter')\n      this.count = await result.json()\n    }\n  }\n})\n```\n\nAnd here's how to use it in a component:\n\n```js\n<script setup>\nimport { useCounterStore } from '@/stores/counter'\nimport { storeToRefs } from 'pinia'\n\nconst store = useCounterStore()\n\n// Destructure with storeToRefs to maintain reactivity\nconst { count, doubleCount } = storeToRefs(store)\n\nfunction increment() {\n  store.increment()\n}\n</script>\n```",
      "tags": "vue, pinia, state-management"
    }
  ]
}